package com.engineering.pathmaker

import com.engineering.model.Traffic
import com.engineering.pathmaker.ContextBuilder._
import org.specs2.mutable.Specification


class PathMakerSpec extends Specification {

  "Canonical environments" should {
    val controlProductMix = Array(
      Array(33.33, 33.33, 33.33),
      Array(25.00, 50.00, 25.00),
      Array(20.00, 40.00, 40.00),
      Array(25.00, 25.00, 50.00),
      Array(50.00, 25.00, 25.00),
      Array(40.00, 40.00, 20.00),
      Array(40.00, 20.00, 40.00)
    )

    "-> lead to canonical product mix" in {
      val productMix = PathMaker.buildProductMix(Canonical.mask)
      productMix.deep must beEqualTo(controlProductMix.deep)
    }

    "-> give this traffic matrix for environment 5" in {
      val controlTraffic =
        """0.0 40.0 0.0 0.0 0.0 0.0 40.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0
          |0.0 0.0 40.0 0.0 0.0 0.0 40.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0
          |0.0 0.0 0.0 60.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 40.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0
          |40.0 0.0 40.0 0.0 20.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 40.0 0.0 0.0
          |0.0 0.0 0.0 0.0 0.0 40.0 0.0 20.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0
          |0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 40.0 0.0 0.0
          |0.0 0.0 0.0 0.0 0.0 0.0 0.0 40.0 0.0 0.0 0.0 0.0 0.0 40.0 40.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0
          |0.0 0.0 20.0 0.0 0.0 0.0 0.0 0.0 40.0 0.0 0.0 40.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0
          |0.0 40.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 40.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0
          |0.0 0.0 0.0 0.0 0.0 0.0 40.0 40.0 40.0 0.0 0.0 0.0 20.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0
          |0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 20.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0
          |0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 20.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 40.0 0.0 0.0 0.0 0.0 0.0
          |0.0 0.0 0.0 0.0 0.0 0.0 0.0 20.0 0.0 0.0 0.0 20.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0
          |0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 40.0 0.0 0.0 0.0 40.0 0.0 0.0 0.0 0.0 0.0 0.0
          |0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 40.0 0.0 0.0 0.0 0.0 0.0 0.0 40.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0
          |0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 40.0 40.0 20.0 0.0 0.0 0.0 0.0 0.0 0.0
          |0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 40.0 0.0 20.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0
          |0.0 0.0 0.0 40.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 20.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0
          |0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 20.0 0.0 0.0 0.0 0.0 20.0 0.0 40.0 0.0 0.0 0.0 0.0 0.0
          |0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 40.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 40.0 0.0 0.0 0.0 0.0
          |0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 40.0 0.0 0.0 0.0
          |0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 40.0 0.0 0.0 0.0 0.0 0.0 20.0
          |0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 40.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 20.0 0.0 40.0 0.0
          |0.0 0.0 0.0 0.0 40.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 20.0 0.0 0.0
          |0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 20.0 0.0 0.0 0.0 0.0 20.0 0.0""".stripMargin

      val traffic5 = Traffic(25, 5, ProductLine.routing, controlProductMix)

      traffic5.toString must beEqualTo(controlTraffic)
    }
  }

  "Disrupted environments" should {
    val controlProductMix = Array(
      Array(36.17, 27.65, 36.17),
      Array(38.63, 38.63, 22.72),
      Array(39.53, 30.23, 30.23),
      Array(42.50, 25.00, 32.50),
      Array(38.63, 22.72, 38.63),
      Array(42.50, 32.50, 25.00),
      Array(36.17, 36.17, 27.65)
    )

    "-> lead to disrupted product mix" in {
      val productMix = PathMaker.buildProductMix(Disrupted.mask)
      productMix.deep must beEqualTo(controlProductMix.deep)
    }

    "-> give this traffic matrix for environment 2" in {
      val controlTraffic =
        """0.0 39.53 0.0 0.0 0.0 0.0 39.53 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0
          |0.0 0.0 39.53 0.0 0.0 0.0 30.23 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0
          |0.0 0.0 0.0 69.76 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 30.23 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0
          |39.53 0.0 30.23 0.0 30.23 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 30.23 0.0 0.0
          |0.0 0.0 0.0 0.0 0.0 30.23 0.0 30.23 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0
          |0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 30.23 0.0 0.0
          |0.0 0.0 0.0 0.0 0.0 0.0 0.0 39.53 0.0 0.0 0.0 0.0 0.0 39.53 30.23 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0
          |0.0 0.0 30.23 0.0 0.0 0.0 0.0 0.0 39.53 0.0 0.0 30.23 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0
          |0.0 30.23 0.0 0.0 0.0 0.0 0.0 0.0 0.0 39.53 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0
          |0.0 0.0 0.0 0.0 0.0 0.0 39.53 30.23 30.23 0.0 0.0 0.0 30.23 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0
          |0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 30.23 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0
          |0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 30.23 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 30.23 0.0 0.0 0.0 0.0 0.0
          |0.0 0.0 0.0 0.0 0.0 0.0 0.0 30.23 0.0 0.0 0.0 30.23 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0
          |0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 39.53 0.0 0.0 0.0 39.53 0.0 0.0 0.0 0.0 0.0 0.0
          |0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 30.23 0.0 0.0 0.0 0.0 0.0 0.0 39.53 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0
          |0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 39.53 30.23 30.23 0.0 0.0 0.0 0.0 0.0 0.0
          |0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 39.53 0.0 30.23 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0
          |0.0 0.0 0.0 30.23 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 30.23 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0
          |0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 30.23 0.0 0.0 0.0 0.0 30.23 0.0 39.53 0.0 0.0 0.0 0.0 0.0
          |0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 30.23 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 39.53 0.0 0.0 0.0 0.0
          |0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 39.53 0.0 0.0 0.0
          |0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 39.53 0.0 0.0 0.0 0.0 0.0 30.23
          |0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 30.23 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 30.23 0.0 30.23 0.0
          |0.0 0.0 0.0 0.0 30.23 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 30.23 0.0 0.0
          |0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 30.23 0.0 0.0 0.0 0.0 30.23 0.0""".stripMargin

      val traffic2 = Traffic(25, 2, ProductLine.routing, controlProductMix)

      traffic2.toString must beEqualTo(controlTraffic)
    }
  }
}
